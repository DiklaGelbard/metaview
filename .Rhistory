BiocManager::repositories()
options(repos = c(BiocManager::repositories()))
options(repos = c(BiocManager::repositories()[6],BiocManager::repositories()[1:5]))
packrat::repos_list()
BiocManager::install('tgconfig',  site_repository = 'tanaylab.bitbucket.io/repo', update = TRUE)
BiocManager::install('metacell',  site_repository = 'tanaylab.bitbucket.io/repo', update = TRUE)
BiocManager::install('tgstat',  site_repository = 'tanaylab.bitbucket.io/repo', update = FALSE)
BiocManager::install('tgutil',  site_repository = 'tanaylab.bitbucket.io/repo', update = FALSE)
BiocManager::install('metacell',  site_repository = 'tanaylab.bitbucket.io/repo', update = FALSE)
setRepositories()
rsconnect::appDependencies()
packrat::repos_list()
packrat::install("metacell")
packrat::install(pkg = 'metacell')
packrat::install(pkg = "metacell")
packrat::install(local = FALSE,pkg = 'metacell',dependencies = TRUE)
packrat::get_lockfile_metadata()
packrat::init()
getOption("repos")
install.packages("Rcurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
getOption("repos")
getOption("packrat.default.project.options")
packrat::init(infer.dependencies = FALSE)
options()
options(repos)
options()$reps
options()$repos
packrat::init(infer.dependencies = FALSE,options = list(repos = options()$repos))
packrat::get_opts()
packrat::init(infer.dependencies = FALSE)
install.packages("openSSL")
install.packages("openssl")
install.packages("RCurl")
install.packages("metacell")
packrat::init()
packrat::init()
install.packages("rsconnect/")
packrat::init(enter = TRUE)
packrat::snapshot()
packrat::get_opts()
packrat::get_lockfile_metadata()
packrat::snapshot(infer.dependencies = F)
packrat::on()
packrat::snapshot(infer.dependencies = F)
available.packages()
df = available.packages()
df[["Repository"]]
df[,"Repository"]
table(df[,"Repository"])
df[df[,"Repository"] == "https://tanaylab.bitbucket.io/repo/src/contrib",]
packrat::init()
packrat::init(enter = TRUE)
packrat::on()
packrat::snapshot()
ackrat:::getPackageRecordsExternalSource("metacell")
packrat:::getPackageRecordsExternalSource("metacell")
packrat:::getPackageRecordsExternalSource("metacell",lib.loc = NULL)
packrat:::getPackageRecordsExternalSource("ggplot2",lib.loc = NULL)
packrat::init(restart = FALSE)
packrat::init("~/thesis/metaview/")
packrat:::getPackageRecordsExternalSource("metacell",lib.loc = NULL)
sconnect::appDependencies()
Rsconnect::appDependencies()
rsconnect::appDependencies()
install.packages("rsconnect")
rsconnect::appDependencies()
install.packages(c("DT","colourpicker","ggthemes","shinyWidgets","shinydashboard","shinyjs"))
install.packages("DT")
packrat::on()
install.packages(c("DT","colourpicker","ggthemes","shinyWidgets","shinydashboard","shinyjs"))
packrat::install(c("DT","colourpicker","ggthemes","shinyWidgets","shinydashboard","shinyjs"))
install.packages("colourpicker")
install.packages("colourpicker")
traceback()
packrat::init()
packrat::on()
install.packages("DT")
install.packages(c("colourpicker", "shinyWidgets", "shinydashboard", "shinyjs"))
packrat::on()
install.packages(c("colourpicker", "shinyWidgets", "shinydashboard", "shinyjs"))
paths = .libPaths()
## Try and detect bad files
list.files(paths,
pattern = "^00LOCK*|*\\.rds$|*\\.RDS$",
full.names = TRUE)
## List files of size 0
l = list.files(paths, full.names = TRUE)
l[sapply(l, file.size) == 0]
packrat::on()
paths = .libPaths()
## Try and detect bad files
list.files(paths,
pattern = "^00LOCK*|*\\.rds$|*\\.RDS$",
full.names = TRUE)
## List files of size 0
l = list.files(paths, full.names = TRUE)
l[sapply(l, file.size) == 0]
install.packages(c("colourpicker", "shinyWidgets", "shinydashboard", "shinyjs"))
packrat::snapshot()
install.packages("ggthemes")
install.packages("ggthemes")
library("RCurl", lib.loc="~/thesis/metaview/packrat/lib/x86_64-pc-linux-gnu/3.5.0")
packrat::on()
install.packages("ggthemes")
packrat::on()
install.packages("ggthemes")
packrat::snapshot()
packrat::getPackageRecordsExternalSource("metacell",lib.loc = NULL)
packrat:::getPackageRecordsExternalSource("metacell",lib.loc = NULL)
packrat:::getPackageRecordsExternalSource("bitops",lib.loc = NULL)
packrat:::getPackageRecordsExternalSource("DT",lib.loc = NULL)
packrat::get_opts()
packrat:::hasSourcePathInDescription("metacell",lib.loc = NULL)
packrat::init()
packrat:::hasSourcePathInDescription("metacell",lib.loc = NULL)
packrat:::hasSourcePathInDescription("ggplot2",lib.loc = NULL)
packrat:::detachPackageForInstallationIfNecessary ("metacell")
packrat:::detachPackageForInstallationIfNecessary("metacell")
packrat::restore()
packrat::restore(overwrite.dirty = TRUE)
install.packages("metacell")
packrat::snapshot()
library(metacell)
library(RCurl)
library(tgconfig)
library(tgstat)
library(tgutil)
packrat::snapshot()
packrat:::appDependencies()
packrat::disable()
get_repos()
getrepos()
options()
options()$repos
BiocManager::repositories()
options(repos=c(tg='https://tanaylab.bitbucket.io/repo',BiocManager::repositories())
)
getOption("repos")
install.packages("metacell")
install.packages("tgconfig")
install.packages("tgutil")
install.packages("tgstat")
install.packages("RCurl")
packrat::init()
packrat::init()
packrat::get_opts()
packrat::repos_list()
getOption("repos")
packrat::init()
packrat::snapshot()
library("tgstat", lib.loc="~/thesis/metaview/packrat/lib/x86_64-pc-linux-gnu/3.5.0")
library("tgutil", lib.loc="~/thesis/metaview/packrat/lib/x86_64-pc-linux-gnu/3.5.0")
library("tgconfig", lib.loc="~/thesis/metaview/packrat/lib/x86_64-pc-linux-gnu/3.5.0")
remove.packages("tgstat", lib="~/thesis/metaview/packrat/lib/x86_64-pc-linux-gnu/3.5.0")
library("metacell", lib.loc="~/thesis/metaview/packrat/lib/x86_64-pc-linux-gnu/3.5.0")
remove.packages("metacell", lib="~/thesis/metaview/packrat/lib/x86_64-pc-linux-gnu/3.5.0")
remove.packages("tgconfig", lib="~/thesis/metaview/packrat/lib/x86_64-pc-linux-gnu/3.5.0")
remove.packages("tgutil", lib="~/thesis/metaview/packrat/lib/x86_64-pc-linux-gnu/3.5.0")
packrat::init()
packrat::off()
library(metacell)
getwd()
scdb_init("db/",force_reinit = T)
default_mc_id <- "lung_kinetics_sorted"
default_mc2d_id <- "lung_kinetics_sorted"
default_mat_id <- "lung_kinetics"
mc = scdb_mc(default_mc_id)
mc_genes = sort(rownames(mc@mc_fp))
mc_cols = mc@colors
mc_cols[is.na(mc@colors)] = "gray"
mat = scdb_mat(default_mat_id)
mc2d = scdb_mc2d(default_mc2d_id)
mc@mc_fp
write.table(mc@mc_fp,file="db/mc_fp.txt",sep="\t")
df_2d = data.frame(sc_x = mc2d@sc_x, sc_y = mc2d@sc_y,cell_type = color2name$Data[mc@colors[mc@mc[names(mc2d@sc_x)]]],
well_id = names(mc2d@sc_x), mc_num = as.integer(mc@mc[names(mc2d@sc_x)]))
df_2d = data.frame(sc_x = mc2d@sc_x, sc_y = mc2d@sc_y, well_id = names(mc2d@sc_x), mc_num = as.integer(mc@mc[names(mc2d@sc_x)]))
head(df_2d)
write.table(df_2d,file="db/df_2d.txt",sep="\t")
df_mc_2d = data.frame(mc_x = mc2d@mc_x,mc_y = mc2d@mc_y, mc_num = as.integer(names(mc2d@mc_x)))
head(df_mc_2d)
write.table(df_mc_2d,file="db/df_mc_2d.txt",sep="\t")
df_2d = read.delim("db/df_2d.txt")
head(df_2d)
name2color <- setNames(unique(mc@color_key[,c("group","color")])$color,unique(mc@color_key[,c("group","color")])$group)
color2name <- setNames(unique(mc@color_key[,c("group","color")])$group,unique(mc@color_key[,c("group","color")])$color)
write.table(mc@colors,file="db/mc_colors.txt",sep="\t")
mc_colors = read.delim("db/mc_colors.txt")[[1]]
mc_colors
mc_colors = read.delim("db/mc_colors.txt",stringsAsFactors = FALSE)[[1]]
mc_colors
write.table(mc@mc,file="db/mc_mc.txt",sep="\t")
mc_mc = read.delim("db/mc_mc.txt")
head(mc_mc)
mc_mc = read.delim("db/mc_mc.txt")[[1]]
names(mc_mc) = rownames(read.delim("db/mc_mc.txt"))
head(mc_mc)
head(df_2d)
head(cbind(df_2d,cell_type = color2name$Data[mc_colors[mc_mc[rownames(df_2d)]]]))
head(cbind(df_2d,cell_type = color2name[mc_colors[mc_mc[rownames(df_2d)]]]))
head(cbind(df_mc_2d, cell_type = color2name$Data[mc_colors[rownames(df_mc_2d)]]))
head(cbind(df_mc_2d, cell_type = color2name[mc_colors[rownames(df_mc_2d)]]))
df_mc_2d =read.delim("db/df_mc_2d.txt")
head(cbind(df_mc_2d, cell_type = color2name[mc_colors[rownames(df_mc_2d)]]))
head(df_mc_2d
)
head(cbind(df_mc_2d, cell_type = color2name[mc_colors[df_mc_2d$mc_num]]))
gset_add_genes()
gset = scdb_gset(gset_id)
gset_id = paste0(default_mc_id,"_marks")
gset = scdb_gset(gset_id)
gset
gset@set_names
gset@gene_set
names(gset@gene_set)
write.table(names(gset@gene_set),file="db/mrks_genes.txt",sep="\t")
write.table(names(gset@gene_set),file="db/marks_genes.txt",sep="\t")
read.delim("db/marks_genes.txt")[[1]]
cell_ord = names(mc_mc)[order(order(mc_ord)[mc_mc])]
mc_ord = 1:ncol(mc_fp)
cell_ord = names(mc_mc)[order(order(mc_ord)[mc_mc])]
shiny::runApp()
runApp()
runApp()
mc_fp = read.delim("db/mc_fp.txt")
head(mc_fp)
write.table(mc@mc_fp,file="db/mc_fp.txt",sep="\t",quote = FALSE,col.names = 1:ncol(mc@mc_fp))
head( read.delim("db/mc_fp.txt")
)
runApp()
ncol(mc_fp)
read.delim("db/mc_colors.txt",stringsAsFactors = FALSE)[[1]]
length(read.delim("db/mc_colors.txt",stringsAsFactors = FALSE)[[1]])
rownames(mc_fp)
colnames(mc_fp)
mc_fp["Acta2",1]
marks_genes
mc_mc = read.delim("db/mc_mc.txt")[[1]]
names(mc_mc) = rownames(read.delim("db/mc_mc.txt"))
mc_mc
names(mc_mc)
runApp()
runApp()
default_mc_col = read.delim("db/color_schemes/lung_mc_colorize.txt")
df = default_mc_col
rownames(df) = 1:nrow(df)
df
default_mat_id
default_mc_col
etNames(unique(default_mc_col[,c("group","color")])$color,unique(default_mc_col[,c("group","color")])$group)
setNames(unique(default_mc_col[,c("group","color")])$color,unique(default_mc_col[,c("group","color")])$group)
mc_fp = read.delim("db/mc_fp.txt")
head(mc_fp)
colnames(mc_fp) = 1:ncol(mc_fp)
head(mc_fp)
mc_fp = read.delim("db/mc_fp.txt",as.is = TRUR)
mc_fp = read.delim("db/mc_fp.txt",as.is = TRUE)
head(mc_fp)
colnames(mc_fp) = 1:ncol(mc_fp)
head(mc_fp)
mc_genes
mc_colors
fp = mc_fp
fp = as.data.frame(t(fp))
HEAD(FP)
head(fp)
fp$cell_type = factor(as.character(color2name[mc_colors[rownames(fp)]]),levels = names(name2color))
fp$mc_num = as.character(1:nrow(fp))
min(fp[,"input$yvar"Acta2])
min(fp[,"Acta2"])
head(fp)
tail(colnames(fp))
runApp()
runApp()
mc_mc = read.delim("db/mc_mc.txt")[[1]]
names(mc_mc) = rownames(read.delim("db/mc_mc.txt"))
mc_mc
length(rownames(read.delim("db/mc_mc.txt")))
length(read.delim("db/mc_mc.txt")[[1]])
mc_colors[mc_ord]
mc_ord = 1:ncol(mc_fp)
mc_colors[mc_ord]
color2name[mc_colors[mc_ord]]
colors_matrix = matrix(data = mc_ord, nrow = 1, ncol = length(mc_ord))
mc_colors_heatmap <- plot_ly(type="heatmap",x = mc_ord,z=colors_matrix,source ="heatmap_marks", hoverinfo = 'text',opacity=1,xgap = 0.5,
text = matrix(paste0("mc:",mc_ord,"<br>","group:",color2name[mc_colors[mc_ord]]),nrow=1,ncol=length(mc_ord)),
colors = mc_colors[mc_ord],showscale = FALSE)
mc_colors_heatmap
mc_colorize <- function(mc_fp, marker_colors, sequential_coloring = FALSE)
{
if (class(marker_colors)[1] != "data.frame" | length(intersect(c("gene",
"group", "color", "priority", "T_fold"), colnames(marker_colors))) !=
5) {
stop("MC-ERR marker colors parameter must be a data frame with fields gene, group, color, priority, T_fold")
}
marker_colors$gene = as.character(marker_colors$gene)
marker_colors$color = as.character(marker_colors$color)
rownames(marker_colors) = marker_colors$gene
good_marks = intersect(rownames(marker_colors), rownames(mc_fp))
if (length(good_marks) == 0) {
message("no color markers are found")
return
}
marker_colors = marker_colors[good_marks, ]
color_key = as.data.frame(marker_colors)
cl_colors = rep(NA, ncol(mc_fp))
if (sequential_coloring) {
for (p in sort(unique(marker_colors$priority))) {
curr_marker_colors = marker_colors[marker_colors$priority == p, ]
marker_fold = mc_fp[curr_marker_colors$gene,]
marker_fold = ifelse(marker_fold > curr_marker_colors$T_fold, Marker_fold, NA)
if (nrow(curr_marker_colors) == 1) {
passed = is.na(cl_colors) & !is.na(marker_fold)
hit = rep(1, sum(passed))
}
else {
passed = is.na(cl_colors) & colSums(!is.na(marker_fold)) >
0
hit = apply(marker_fold[, passed], 2, which.max)
}
cl_colors[passed] = curr_marker_colors[hit, "color"]
}
}
else {
marker_colors = marker_colors[order(marker_colors$priority),]
marker_fold = mc_fp[marker_colors$gene, ]
marker_fold = ifelse(marker_fold > marker_colors$T_fold,log2(marker_fold), NA)
marker_fold = marker_fold * marker_colors$priority
if (length(good_marks) > 1) {
nonz = colSums(!is.na(marker_fold)) > 0
hit = apply(marker_fold[, nonz], 2, which.max)
}
else {
nonz = marker_fold > 0
hit = rep(1, sum(nonz))
}
cl_colors[nonz] = marker_colors[hit, "color"]
}
cl_colors[is.na(cl_colors)] = "gray"
return(cl_colors)
}
local_mc_colorize <- function(mc_fp, marker_colors, sequential_coloring = FALSE)
{
if (class(marker_colors)[1] != "data.frame" | length(intersect(c("gene",
"group", "color", "priority", "T_fold"), colnames(marker_colors))) !=
5) {
stop("MC-ERR marker colors parameter must be a data frame with fields gene, group, color, priority, T_fold")
}
marker_colors$gene = as.character(marker_colors$gene)
marker_colors$color = as.character(marker_colors$color)
rownames(marker_colors) = marker_colors$gene
good_marks = intersect(rownames(marker_colors), rownames(mc_fp))
if (length(good_marks) == 0) {
message("no color markers are found")
return
}
marker_colors = marker_colors[good_marks, ]
color_key = as.data.frame(marker_colors)
cl_colors = rep(NA, ncol(mc_fp))
if (sequential_coloring) {
for (p in sort(unique(marker_colors$priority))) {
curr_marker_colors = marker_colors[marker_colors$priority == p, ]
marker_fold = mc_fp[curr_marker_colors$gene,]
marker_fold = ifelse(marker_fold > curr_marker_colors$T_fold, Marker_fold, NA)
if (nrow(curr_marker_colors) == 1) {
passed = is.na(cl_colors) & !is.na(marker_fold)
hit = rep(1, sum(passed))
}
else {
passed = is.na(cl_colors) & colSums(!is.na(marker_fold)) >
0
hit = apply(marker_fold[, passed], 2, which.max)
}
cl_colors[passed] = curr_marker_colors[hit, "color"]
}
}
else {
marker_colors = marker_colors[order(marker_colors$priority),]
marker_fold = mc_fp[marker_colors$gene, ]
marker_fold = ifelse(marker_fold > marker_colors$T_fold,log2(marker_fold), NA)
marker_fold = marker_fold * marker_colors$priority
if (length(good_marks) > 1) {
nonz = colSums(!is.na(marker_fold)) > 0
hit = apply(marker_fold[, nonz], 2, which.max)
}
else {
nonz = marker_fold > 0
hit = rep(1, sum(nonz))
}
cl_colors[nonz] = marker_colors[hit, "color"]
}
cl_colors[is.na(cl_colors)] = "gray"
return(cl_colors)
}
local_mc_colorize(mc_fp,default_mc_col)
default_mc_col
marker_colors = default_mc_col
marker_colors = marker_colors[order(marker_colors$priority),]
marker_fold = mc_fp[marker_colors$gene, ]
marker_fold
marker_fold = ifelse(marker_fold > marker_colors$T_fold,log2(marker_fold), NA)
marker_fold = marker_fold * marker_colors$priority
marker_colors$priority
marker_fold = as.matrix(mc_fp[marker_colors$gene, ])
marker_fold = ifelse(marker_fold > marker_colors$T_fold,log2(marker_fold), NA)
marker_fold = marker_fold * marker_colors$priority
runApp()
runApp()
mc_colors
mc_colors["1"]
mc_colors[1]
runApp()
runApp()
name2color
runApp()
mc_colors
as.character(color2name$Data[as.character(mc_colors[rownames(fp)])])
as.character(color2name[as.character(mc_colors[rownames(fp)])])
runApp()
fp$cell_type = as.character(color2name$Data[as.character(mc_colors[rownames(fp)])])
fp$mc_num = as.character(1:nrow(fp))
fp$cell_type = as.character(color2name[as.character(mc_colors[rownames(fp)])])
fp$mc_num = as.character(1:nrow(fp))
plot_ly(fp[,c(xvar_name,yvar_name,"cell_type","mc_num")],source = "ga_gb", type = "scatter",mode = "markers",
x = ~fp[[xvar_name]], y = ~fp[[yvar_name]],color = ~cell_type,colors = name2color$Data,
marker = list(size = 20,opacity = 0.5), key = ~mc_num,
hoverinfo = "text", text = ~paste("<b>","mc: ",fp[["mc_num"]] ,"</b><br><b>","cell type: ", fp[["cell_type"]] ,"</b><br>"))
xvar_name ="Acta2"
yvar_name ="Tgfbi"
plot_ly(fp[,c(xvar_name,yvar_name,"cell_type","mc_num")],source = "ga_gb", type = "scatter",mode = "markers",
x = ~fp[[xvar_name]], y = ~fp[[yvar_name]],color = ~cell_type,colors = name2color$Data,
marker = list(size = 20,opacity = 0.5), key = ~mc_num,
hoverinfo = "text", text = ~paste("<b>","mc: ",fp[["mc_num"]] ,"</b><br><b>","cell type: ", fp[["cell_type"]] ,"</b><br>"))
plot_ly(fp[,c(xvar_name,yvar_name,"cell_type","mc_num")],source = "ga_gb", type = "scatter",mode = "markers",
x = ~fp[[xvar_name]], y = ~fp[[yvar_name]],color = ~cell_type,colors = name2color,
marker = list(size = 20,opacity = 0.5), key = ~mc_num,
hoverinfo = "text", text = ~paste("<b>","mc: ",fp[["mc_num"]] ,"</b><br><b>","cell type: ", fp[["cell_type"]] ,"</b><br>"))
plot_ly(fp[,c(xvar_name,yvar_name,"cell_type","mc_num")],source = "ga_gb", type = "scatter",mode = "markers",
x = ~fp[[xvar_name]], y = ~fp[[yvar_name]],color = ~cell_type,colors = name2color,
marker = list(size = 20,opacity = 0.5), key = ~mc_num,
hoverinfo = "text", text = ~paste("<b>","mc: ",fp[["mc_num"]] ,"</b><br><b>","cell type: ", fp[["cell_type"]] ,"</b><br>"))%>%
layout(xaxis = list(title = xvar_name), yaxis = list(title = yvar_name) ,
shapes= list(hline(y=horiz,x0 = floor(min(fp[[xvar_name]])), x1 = ceiling(max(fp[[xvar_name]]))),vline(x=vert,y0 =floor(min(fp[[yvar_name]])), y1 =ceiling(max(fp[[yvar_name]]))+1 ))) %>%
add_annotations(text = ~mc_num,size = 0.3,color = I("black"),  showarrow = FALSE,ax = 0,ay =0) %>% hide_legend()
hline =1
vline=1
plot_ly(fp[,c(xvar_name,yvar_name,"cell_type","mc_num")],source = "ga_gb", type = "scatter",mode = "markers",
x = ~fp[[xvar_name]], y = ~fp[[yvar_name]],color = ~cell_type,colors = name2color,
marker = list(size = 20,opacity = 0.5), key = ~mc_num,
hoverinfo = "text", text = ~paste("<b>","mc: ",fp[["mc_num"]] ,"</b><br><b>","cell type: ", fp[["cell_type"]] ,"</b><br>"))%>%
layout(xaxis = list(title = xvar_name), yaxis = list(title = yvar_name) ,
shapes= list(hline(y=horiz,x0 = floor(min(fp[[xvar_name]])), x1 = ceiling(max(fp[[xvar_name]]))),vline(x=vert,y0 =floor(min(fp[[yvar_name]])), y1 =ceiling(max(fp[[yvar_name]]))+1 ))) %>%
add_annotations(text = ~mc_num,size = 0.3,color = I("black"),  showarrow = FALSE,ax = 0,ay =0) %>% hide_legend()
hline <- function(y = 0,x0 = 0, x1= 1, color = "black") {
list(
type = "line",
x0 = x0,
x1 = x1,
xref = "paper",
y0 = y,
y1 = y,
line = list(color = color)
)
}
vline <- function(x = 0, y0 = 0, y1=1, color = "black") {
list(
type = "line",
y0 = y0,
y1 = y1,
yref = "paper",
x0 = x,
x1 = x,
line = list(color = color)
)
}
plot_ly(fp[,c(xvar_name,yvar_name,"cell_type","mc_num")],source = "ga_gb", type = "scatter",mode = "markers",
x = ~fp[[xvar_name]], y = ~fp[[yvar_name]],color = ~cell_type,colors = name2color,
marker = list(size = 20,opacity = 0.5), key = ~mc_num,
hoverinfo = "text", text = ~paste("<b>","mc: ",fp[["mc_num"]] ,"</b><br><b>","cell type: ", fp[["cell_type"]] ,"</b><br>"))%>%
layout(xaxis = list(title = xvar_name), yaxis = list(title = yvar_name) ,
shapes= list(hline(y=horiz,x0 = floor(min(fp[[xvar_name]])), x1 = ceiling(max(fp[[xvar_name]]))),vline(x=vert,y0 =floor(min(fp[[yvar_name]])), y1 =ceiling(max(fp[[yvar_name]]))+1 ))) %>%
add_annotations(text = ~mc_num,size = 0.3,color = I("black"),  showarrow = FALSE,ax = 0,ay =0) %>% hide_legend()
horiz=1
vert=1
plot_ly(fp[,c(xvar_name,yvar_name,"cell_type","mc_num")],source = "ga_gb", type = "scatter",mode = "markers",
x = ~fp[[xvar_name]], y = ~fp[[yvar_name]],color = ~cell_type,colors = name2color,
marker = list(size = 20,opacity = 0.5), key = ~mc_num,
hoverinfo = "text", text = ~paste("<b>","mc: ",fp[["mc_num"]] ,"</b><br><b>","cell type: ", fp[["cell_type"]] ,"</b><br>"))%>%
layout(xaxis = list(title = xvar_name), yaxis = list(title = yvar_name) ,
shapes= list(hline(y=horiz,x0 = floor(min(fp[[xvar_name]])), x1 = ceiling(max(fp[[xvar_name]]))),vline(x=vert,y0 =floor(min(fp[[yvar_name]])), y1 =ceiling(max(fp[[yvar_name]]))+1 ))) %>%
add_annotations(text = ~mc_num,size = 0.3,color = I("black"),  showarrow = FALSE,ax = 0,ay =0) %>% hide_legend()
runApp()
fp$color = as.character(mc_colors[rownames(fp)])
fp$cell_type = factor(as.character(color2name[mc_colors[rownames(fp)]]),levels = names(name2color))
fp$color = factor(as.character(mc_colors[rownames(fp)]),levels = names(color2name))
unique(fp$color)
levels(fp$color)
levels(fp$cell_type)
name2color
runApp()
runApp()
runApp()
runApp()
fileInput('upload_mc_col',multiple = FALSE,label = NULL,accept = c(".txt"))
runApp()
selectInput("select", label = h3("Select box"),
choices = mc_genes,
selected = "Acta2")
%>%
